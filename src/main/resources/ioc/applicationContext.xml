<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
        1. setter方法 属性注入 ——配置bean
        class： bean 的全类名，通过反射的方式在 IOC容器中创建 Bean ，要求 Bean 中必须有无参数的构造器
        id：给容器 bean 进行标识，id 唯一。
    -->
    <bean id="helloWorld2" class="spring.beans.HelloWorld">
        <property name="name2" value="My Spring name"></property>
    </bean>

    <!--
        2. 构造方法 ——配置 bean
    -->
    <bean id="car" class="spring.beans.Car">
        <constructor-arg value="Audi" index="0"></constructor-arg>
        <constructor-arg value="ShangHai" index="1"></constructor-arg>
        <constructor-arg value="250" type="int"></constructor-arg>
    </bean>

    <!--
        2.1使用构造器注入属性值可以指定参数的 位置 和 参数的类型 ！以区分重载的构造器！
    -->
    <bean id="car2" class="spring.beans.Car">
        <constructor-arg value="Baoma" type="java.lang.String"></constructor-arg>
        <!-- 3.1 如果字面值包含特殊字符可以使用 <![CDATA[]]> 包裹起来-->
        <!-- 3.2 属性值可以使用 value 子节点进行配置-->
        <constructor-arg type="java.lang.String">
            <value><![CDATA[^BeiJIng^]]></value>
        </constructor-arg>
        <constructor-arg type="int">
            <value>300</value>
        </constructor-arg>
    </bean>

    <bean id="person" class="spring.beans.Person">
        <property name="name" value="Tom"></property>
        <property name="age" value="24"></property>
        <!-- 4.1 可以使用 property或constructor-arg 的 ref 属性建立 bean 之间的引用关系。-->

<!--
        <property name="car" ref="car2"></property>
-->
<!--
        <property name="car">
            <ref bean="car2"/>
        </property>
-->
        <!-- 4.2 内部bean ，不能被外部引用-->
        <property name="car">
            <bean class="spring.beans.Car">
                <constructor-arg value="Ford"></constructor-arg>
                <constructor-arg value="Changan"></constructor-arg>
                <constructor-arg value="400000" type="double"></constructor-arg>
                <constructor-arg value="350" type="int"></constructor-arg>
            </bean>
        </property>
        <property name="car.price" value="400001"></property>

    </bean>

    <!-- 4.3 可以使用 property或constructor-arg 的 ref 属性建立 bean 之间的引用关系。-->
    <bean id="person2" class="spring.beans.Person">
        <constructor-arg value="Jerry"></constructor-arg>
        <constructor-arg value="22"></constructor-arg>
        <constructor-arg ref="car"></constructor-arg>
        <!-- 5 为级联属性赋值  ,必须先对对象初始化后才可赋值 -->
        <property name="car.price" value="300000"></property>
    </bean>

    <bean id="person3" class="spring.beans.Person">
        <constructor-arg value="Owen"></constructor-arg>
        <constructor-arg value="20"></constructor-arg>
        <!-- 6 测试赋值 null  ，引用数据类型默认值也是 null -->
        <constructor-arg type="spring.beans.Car"><null/></constructor-arg>
    </bean>

    <!-- 7 测试如何配置集合属性 list 数组 set ， map-->
    <bean id="person4" class="spring.beans.collection.Person">
        <property name="name" value="Mike"></property>
        <property name="age" value="30"></property>
        <property name="cars">
            <!-- 7.1 使用 list 节点为 List 类型的属性赋值 -->
            <list>
                <ref bean="car" />
                <ref bean="car2" />
                <!-- 7.2 内部 bean 为 list 节点赋值 -->
                <bean class="spring.beans.Car">
                    <constructor-arg value="Ford"></constructor-arg>
                    <constructor-arg value="Changan"></constructor-arg>
                    <constructor-arg value="400000" type="double"></constructor-arg>
                    <constructor-arg value="350" type="int"></constructor-arg>
                </bean>
            </list>
        </property>
    </bean>

    <!-- 8 配置 map 集合属性 -->
    <bean id="person5" class="spring.beans.collection.NewPerson">
        <property name="name" value="Rose"></property>
        <property name="age" value="28"></property>
        <property name="cars" >
            <!-- 8.1 使用 map 节点及 entry 子节点配置 Map 类型的成员变量 -->
            <map>
                <entry key="AA" value-ref="car"></entry>
                <entry key="BB" value-ref="car2"></entry>
            </map>
        </property>
    </bean>

<!-- 9.配置 Properties 属性值 -->
    <bean id="dataSource" class="spring.beans.collection.DataSource">
        <property name="properties">
            <!-- 使用 props 和 prop 子节点来为 Properties 属性赋值 -->
            <props>
                <prop key="user">ioc_root</prop>
                <prop key="password">5206721</prop>
                <prop key="jdbcUrl">jdbc:mysql:///applicationContext/test</prop>
                <prop key="driverClass">com.mysql.jdbc.Driver</prop>
            </props>
        </property>
    </bean>

    <!-- 配置独立的集合 bean，以供多个 bean 进行引用,使用 util 命名空间 -->
    <util:list id="util_cars">
        <ref bean="car" />
        <ref bean="car2" />
    </util:list>

    <bean id="person6" class="spring.beans.collection.Person">
        <property name="name" value="Jack"></property>
        <property name="age" value="29"></property>
        <property name="cars" ref="util_cars"></property>
    </bean>

    <!-- 通过 p 命名空间为 bean 的属性赋值，更简化配置 -->
    <bean id="person7" class="spring.beans.collection.Person"
          p:name="Queen" p:age="27" p:cars-ref="util_cars"></bean>



</beans>













